#pragma once

#include <cstddef>

namespace std
{


struct nothrow_t
{
    explicit nothrow_t() = default;
};


extern const std::nothrow_t nothrow;


enum class align_val_t: std::size_t {};


}
// namespace std


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// new
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void* operator new(std::size_t);
void* operator new[](std::size_t);
void* operator new(std::size_t, std::align_val_t);
void* operator new[](std::size_t, std::align_val_t);

void* operator new(std::size_t, const std::nothrow_t&) noexcept;
void* operator new[](std::size_t, const std::nothrow_t&) noexcept;
void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&) noexcept;
void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&) noexcept;

void* operator new(std::size_t, void* ptr) noexcept;
void* operator new[](std::size_t, void* ptr) noexcept;


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// delete
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void operator delete(void*) noexcept;
void operator delete[](void*) noexcept;
void operator delete(void*, std::align_val_t) noexcept;
void operator delete[](void*, std::align_val_t) noexcept;
void operator delete(void*, std::size_t) noexcept;
void operator delete[](void*, std::size_t) noexcept;
void operator delete(void*, std::size_t, std::align_val_t) noexcept;
void operator delete[](void*, std::size_t, std::align_val_t) noexcept;

void operator delete(void*, const std::nothrow_t&) noexcept;
void operator delete[](void*, const std::nothrow_t&) noexcept;
void operator delete(void*, std::align_val_t, const std::nothrow_t&) noexcept;
void operator delete[](void*, std::align_val_t, const std::nothrow_t&) noexcept;
void operator delete(void*, void*) noexcept;
void operator delete[](void*, void*) noexcept;

